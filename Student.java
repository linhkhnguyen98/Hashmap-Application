/**
 * Student file 
 * Student class including an identity of students, 
 * and will be stored in Course object.
 */
import java.util.Objects;

/**
 * Studen class implements Comparable interface with Student type
 */
public class Student implements Comparable<Student> {
    private final String firstName;
    private final String lastName;
    private final String PID;

    /**
     * Student constructor
     * @param firstName
     * @param lastName
     * @param PID
     */
    public Student(String firstName, String lastName, String PID) {
        if(firstName == null && lastName == null && PID == null){
            throw new IllegalArgumentException();
        }
        this.firstName = firstName;
        this.lastName = lastName;
        this.PID = PID;
    }

    /**
     * getLastName method
     * Return the student’s last name.
     * @return Student's last name
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * getFirstName method
     * Return the student’s first name.
     * @return Student first name
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * getPID method
     * Return the student’s PID
     * @return Student PID
     */
    public String getPID() {
        return PID;
    }

    /**
     * equals(Object o) method
     * Return true if o is a non-null Student
     * and all the instance variables of o equal 
     * the instance variable of the current Student object. 
     * @return Return true if o is an non-null Student
     * and return false if otherwise
     */
    @Override
    public boolean equals(Object o) {
        Student other = (Student) o;
        // if(o != null && this.getLastName().equals(other.getLastName()) &&
        //     (this.getFirstName().equals(other.firstName) &&
        //     (this.getPID().equals(other.getPID())))){
        //     return true;
        // }
        //if object is not null
        if(o != null){
            return true;
        }
        //if current student's last name is equal to object's last name
        if(this.getLastName().equals(other.getLastName())){
            return true;
        }
        //if current student's first name is equal to object's first name
        if(this.getFirstName().equals(other.getFirstName())){
            return true;
        }
        //if current student's PID is equal to object's PID
        if(this.getPID().equals(other.getPID())){
            return true;
        }
        return false;
    }

    /**
     * hashCode() method
     * The hash function should generate a hash value 
     * in the order of the student’s firstName, lastName, and PID.
     * @return Return the hash value generated by Object’s hash function.
     */
    @Override
    public int hashCode() {
        return Objects.hash(firstName, lastName, PID);
    }

    /**
     * compareTo(Student o)
     * Comparing Student's last name, first nane, and PID
     * to an object last name, first nane, and PID.
     * @param object
     * @return 0, 1, or -1
     */
    @Override
    public int compareTo(Student o){
        int compareLastName = this.getLastName().compareTo(o.getLastName());
        int compareFirstName = this.getFirstName().compareTo(o.getFirstName());
        int comparePID = this.getPID().compareTo(o.getPID());

        //If last name is equal from two objects
        if(compareLastName == 0){
            //Compare first name,
            //If first name is equal
            if(compareFirstName == 0){
                //check PID
                return comparePID;
            }
            //If first name is not equal
            else {
                return compareFirstName;
            }
        }
        //if last name is not equal
        else{
            return compareLastName;
        }
    }
}